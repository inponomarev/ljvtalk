LJV: Чему нас может научить визуализация структур данных в Java

LJV -- проект, созданный в 2004 году как инструмент для преподавания языка Java студентам. С помощью рефлексии и GraphViz он позволяет визуализировать внутреннее устройство структур данных. Мы запустим LJV на множестве разных структур данных (от String до ConcurrentSkipListMap) в разных версиях Java и посмотрим, что там внутри и почему всё так.


Доклад по мотивам https://dzone.com/articles/what-can-we-learn-from-java-data-structures-visual

Предварительный план

1. Зачем мне понадобился LJV и как я его нашёл.
2. GraphViz - краткий экскурс
3. LJV и JOL
4. Строки: внутренности и исторический экскурс
- До 7-ки -- offset и count, использование общего буфера (как могли происходить утечки памяти)
- 8-ка: без offset и count
- 9-ка: coder и компактификация
- 13-я: hashIsZero
5. Переиспользование строк в пуле и переиспользование внутренних буферов: создание через конструкторы; + и concat с пустой строкой; интернирование строк.
6. Кэширование wrapper типов (-XX:AutoBoxCacheMax)
7. LinkedList, проблемы с ним
8. ArrayDeque: array-based реализация Deque. 
9. PriorityQueue: priority heap
10. HashMap: коллизии, превращение связного списка в дерево
11. ConcurrentHashMap в 7-ке и 8-ке
11. LinkedHashMap (LRU cache)
12. TreeMap: как работает red-black tree
13. ConcurrentSkipListMap: устройство и работа